// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Commit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Commit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommit(bb:flatbuffers.ByteBuffer, obj?:Commit):Commit {
  return (obj || new Commit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommit(bb:flatbuffers.ByteBuffer, obj?:Commit):Commit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Commit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

oid():string|null
oid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

author():string|null
author(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
author(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startCommit(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addOid(builder:flatbuffers.Builder, oidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, oidOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, authorOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(3, timestamp, BigInt('0'));
}

static endCommit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // oid
  return offset;
}

static finishCommitBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCommitBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createCommit(builder:flatbuffers.Builder, oidOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset, authorOffset:flatbuffers.Offset, timestamp:bigint):flatbuffers.Offset {
  Commit.startCommit(builder);
  Commit.addOid(builder, oidOffset);
  Commit.addMessage(builder, messageOffset);
  Commit.addAuthor(builder, authorOffset);
  Commit.addTimestamp(builder, timestamp);
  return Commit.endCommit(builder);
}
}
