// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod gitultra {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};
    #[allow(unused_imports, dead_code)]
    pub mod git {

        use core::cmp::Ordering;
        use core::mem;

        extern crate flatbuffers;
        use self::flatbuffers::{EndianScalar, Follow};

        pub enum CommitOffset {}
        #[derive(Copy, Clone, PartialEq)]

        pub struct Commit<'a> {
            pub _tab: flatbuffers::Table<'a>,
        }

        impl<'a> flatbuffers::Follow<'a> for Commit<'a> {
            type Inner = Commit<'a>;
            #[inline]
            unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
                Self {
                    _tab: flatbuffers::Table::new(buf, loc),
                }
            }
        }

        impl<'a> Commit<'a> {
            pub const VT_OID: flatbuffers::VOffsetT = 4;
            pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;
            pub const VT_AUTHOR: flatbuffers::VOffsetT = 8;
            pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;

            #[inline]
            pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
                Commit { _tab: table }
            }
            #[allow(unused_mut)]
            pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
                _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
                args: &'args CommitArgs<'args>,
            ) -> flatbuffers::WIPOffset<Commit<'bldr>> {
                let mut builder = CommitBuilder::new(_fbb);
                builder.add_timestamp(args.timestamp);
                if let Some(x) = args.author {
                    builder.add_author(x);
                }
                if let Some(x) = args.message {
                    builder.add_message(x);
                }
                if let Some(x) = args.oid {
                    builder.add_oid(x);
                }
                builder.finish()
            }

            #[inline]
            pub fn oid(&self) -> &'a str {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe {
                    self._tab
                        .get::<flatbuffers::ForwardsUOffset<&str>>(Commit::VT_OID, None)
                        .unwrap()
                }
            }
            #[inline]
            pub fn message(&self) -> Option<&'a str> {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Commit::VT_MESSAGE, None) }
            }
            #[inline]
            pub fn author(&self) -> Option<&'a str> {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Commit::VT_AUTHOR, None) }
            }
            #[inline]
            pub fn timestamp(&self) -> i64 {
                // Safety:
                // Created from valid Table for this object
                // which contains a valid value in this slot
                unsafe { self._tab.get::<i64>(Commit::VT_TIMESTAMP, Some(0)).unwrap() }
            }
        }

        impl flatbuffers::Verifiable for Commit<'_> {
            #[inline]
            fn run_verifier(v: &mut flatbuffers::Verifier, pos: usize) -> Result<(), flatbuffers::InvalidFlatbuffer> {
                use self::flatbuffers::Verifiable;
                v.visit_table(pos)?
                    .visit_field::<flatbuffers::ForwardsUOffset<&str>>("oid", Self::VT_OID, true)?
                    .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
                    .visit_field::<flatbuffers::ForwardsUOffset<&str>>("author", Self::VT_AUTHOR, false)?
                    .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
                    .finish();
                Ok(())
            }
        }
        pub struct CommitArgs<'a> {
            pub oid: Option<flatbuffers::WIPOffset<&'a str>>,
            pub message: Option<flatbuffers::WIPOffset<&'a str>>,
            pub author: Option<flatbuffers::WIPOffset<&'a str>>,
            pub timestamp: i64,
        }
        impl<'a> Default for CommitArgs<'a> {
            #[inline]
            fn default() -> Self {
                CommitArgs {
                    oid: None, // required field
                    message: None,
                    author: None,
                    timestamp: 0,
                }
            }
        }

        pub struct CommitBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
            fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
        }
        impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CommitBuilder<'a, 'b, A> {
            #[inline]
            pub fn add_oid(&mut self, oid: flatbuffers::WIPOffset<&'b str>) {
                self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Commit::VT_OID, oid);
            }
            #[inline]
            pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b str>) {
                self.fbb_
                    .push_slot_always::<flatbuffers::WIPOffset<_>>(Commit::VT_MESSAGE, message);
            }
            #[inline]
            pub fn add_author(&mut self, author: flatbuffers::WIPOffset<&'b str>) {
                self.fbb_
                    .push_slot_always::<flatbuffers::WIPOffset<_>>(Commit::VT_AUTHOR, author);
            }
            #[inline]
            pub fn add_timestamp(&mut self, timestamp: i64) {
                self.fbb_.push_slot::<i64>(Commit::VT_TIMESTAMP, timestamp, 0);
            }
            #[inline]
            pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CommitBuilder<'a, 'b, A> {
                let start = _fbb.start_table();
                CommitBuilder {
                    fbb_: _fbb,
                    start_: start,
                }
            }
            #[inline]
            pub fn finish(self) -> flatbuffers::WIPOffset<Commit<'a>> {
                let o = self.fbb_.end_table(self.start_);
                self.fbb_.required(o, Commit::VT_OID, "oid");
                flatbuffers::WIPOffset::new(o.value())
            }
        }

        impl core::fmt::Debug for Commit<'_> {
            fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
                let mut ds = f.debug_struct("Commit");
                ds.field("oid", &self.oid());
                ds.field("message", &self.message());
                ds.field("author", &self.author());
                ds.field("timestamp", &self.timestamp());
                ds.finish()
            }
        }
        #[inline]
        /// Verifies that a buffer of bytes contains a `Commit`
        /// and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_commit_unchecked`.
        pub fn root_as_commit(buf: &[u8]) -> Result<Commit, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::root::<Commit>(buf)
        }
        #[inline]
        /// Verifies that a buffer of bytes contains a size prefixed
        /// `Commit` and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `size_prefixed_root_as_commit_unchecked`.
        pub fn size_prefixed_root_as_commit(buf: &[u8]) -> Result<Commit, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::size_prefixed_root::<Commit>(buf)
        }
        #[inline]
        /// Verifies, with the given options, that a buffer of bytes
        /// contains a `Commit` and returns it.
        /// Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_commit_unchecked`.
        pub fn root_as_commit_with_opts<'b, 'o>(
            opts: &'o flatbuffers::VerifierOptions,
            buf: &'b [u8],
        ) -> Result<Commit<'b>, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::root_with_opts::<Commit<'b>>(opts, buf)
        }
        #[inline]
        /// Verifies, with the given verifier options, that a buffer of
        /// bytes contains a size prefixed `Commit` and returns
        /// it. Note that verification is still experimental and may not
        /// catch every error, or be maximally performant. For the
        /// previous, unchecked, behavior use
        /// `root_as_commit_unchecked`.
        pub fn size_prefixed_root_as_commit_with_opts<'b, 'o>(
            opts: &'o flatbuffers::VerifierOptions,
            buf: &'b [u8],
        ) -> Result<Commit<'b>, flatbuffers::InvalidFlatbuffer> {
            flatbuffers::size_prefixed_root_with_opts::<Commit<'b>>(opts, buf)
        }
        #[inline]
        /// Assumes, without verification, that a buffer of bytes contains a Commit and returns it.
        /// # Safety
        /// Callers must trust the given bytes do indeed contain a valid `Commit`.
        pub unsafe fn root_as_commit_unchecked(buf: &[u8]) -> Commit {
            flatbuffers::root_unchecked::<Commit>(buf)
        }
        #[inline]
        /// Assumes, without verification, that a buffer of bytes contains a size prefixed Commit and returns it.
        /// # Safety
        /// Callers must trust the given bytes do indeed contain a valid size prefixed `Commit`.
        pub unsafe fn size_prefixed_root_as_commit_unchecked(buf: &[u8]) -> Commit {
            flatbuffers::size_prefixed_root_unchecked::<Commit>(buf)
        }
        #[inline]
        pub fn finish_commit_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            root: flatbuffers::WIPOffset<Commit<'a>>,
        ) {
            fbb.finish(root, None);
        }

        #[inline]
        pub fn finish_size_prefixed_commit_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
            fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
            root: flatbuffers::WIPOffset<Commit<'a>>,
        ) {
            fbb.finish_size_prefixed(root, None);
        }
    } // pub mod git
} // pub mod gitultra
